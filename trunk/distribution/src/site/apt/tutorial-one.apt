Tutorial: Part One

    This tutorial is available to give a quick glimpse of how to use Waffle.  It touches on each of the main components
    that make up Waffle.

* Action

    The term <<Action>> is probably familiar to those who have worked with other web frameworks.  An Action in Waffle
    can be any java object (i.e. Pojo).  However, in order for a Pojo to be considered an Action in Waffle it needs to
    be registered with the <<Registrar>>.  The Registrar is a simple class that your application must implement.  The
    Registrar provides a few methods that allows you to register your pojo's as Actions.  For complete details on the
    Registrar have a look at the {{{registrar.html}Registrar}} section.

    Now we will write a very simple class to use as an Action.  The class below is really nothing more than a simple
    bean type of object.

+-----+
public class Automobile implements Serializable {
    private String make = "ford";
    private String model = "gt-40";

    public String getMake() {
        return make;
    }

    public void setMake(String make) {
        this.make = make;
    }

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }
}
+-----+

* Registrar

    As stated earlier, an Action is not an Action in Waffle until it has been registered with the Registrar.  So
    now we will create a simple Registrar class and register the <<Automobile>> class with it.   The MyRegistrar
    class below defines the method "<<session>>" and within that method it calls
    <<register("automobile", Automobile.class);>>, which registers our Automobile class as an action under the
    name "automobile".  Registration is not limited to actions because any component, service, factory, etc... can be
    registered.  Detailed examples of this will be discussed later.


+-----+
public class MyRegistrar extends org.codehaus.waffle.registrar.AbstractRegistrar {

    public MyRegistrar(Registrar delegate) {
        super(delegate);
    }

    @RegisterWithSession
    public void session() {
        register("automobile", Automobile.class);
    }
}
+-----+

    Notice the annotation <<@RegisterWithSession>> that has been added above the <session()> method.  You can annotate
    as many methods as necessary within your custom Registrar, the actual method name is not significant- any name will
    work.  This allows your Registrar to logically seperate the registration of components and Actions.  Waffle actually
    provides three registration annotations.  The table below describes each of the available registration annotations
    provided by Waffle.

*---------------------------+------------------------------------------------------------------------------------------+
| <<Annotation>>            | <<Description>>
*---------------------------+------------------------------------------------------------------------------------------+
| @RegisterWithApplication  | Methods annotated with this will be invoked upon <<ServletContext initialization>>.  This should be used for those components that need to live for the entire length of the application.
*---------------------------+------------------------------------------------------------------------------------------+
| @RegisterWithSession      | Methods annotated with this will be invoked upon <<HttpSession creation>>.  This should be used for those components that need to live for the entire length of a users session.
*---------------------------+------------------------------------------------------------------------------------------+
| @RegisterWithRequest      | Methods annotated with this will be invoked upon <<ServletRequest initialization>>.  This should be used for those components that need to live for the entire length of a request
*---------------------------+------------------------------------------------------------------------------------------+


* web.xml

    While Waffle does not require any proprietary XML configuration files we still must create a <<web.xml>>.  The
    web.xml example below has four points worth mentioning.

    [[1]] <<org.codehaus.waffle.registrar.Registrar>> is the key used to register your applications custom
    Registrar.  The key is the fully qualified name of the basic Registrar interface.

    [[1]] <<org.codehaus.waffle.context.WaffleContextListener>> needs to be registered as a listener so that Waffle
    can be notified of context level (application, session) events.

    [[1]] <<org.codehaus.waffle.context.WaffleRequestFilter>> this is the Filter Waffle uses to handle request level
    events.  This is superior to a RequestAttributeListeners implementation because we can ensure a request level
    container will only be created when appropriate (i.e. not when images or cascading style sheets are requested).

    [[1]] <<org.codehaus.waffle.WaffleServlet>> is Waffle's front controller for handling requests.

+-----+
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
            http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
    <display-name>Waffle Tutorial Example</display-name>

    <!-- 1. This is how an application registers it custom Registrar -->
    <context-param>
        <param-name>org.codehaus.waffle.registrar.Registrar</param-name>
        <param-value>MyRegistrar</param-value>
    </context-param>

    <!-- 2. Waffle context listener (ServletContext and HttpSession) -->
    <listener>
        <listener-class>org.codehaus.waffle.context.WaffleContextListener</listener-class>
    </listener>

    <!-- 3. Waffle request filter (responsible for request level context) -->
    <filter>
        <filter-name>WaffleRequestFilter</filter-name>
        <filter-class>org.codehaus.waffle.context.WaffleRequestFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>WaffleRequestFilter</filter-name>
        <url-pattern>*.waf</url-pattern>
    </filter-mapping>

    <!-- 4. Register Waffle's FrontController servlet -->
    <servlet>
        <servlet-name>waffle</servlet-name>
        <servlet-class>org.codehaus.waffle.servlet.WaffleServlet</servlet-class>
        <init-param>
            <param-name>view.suffix</param-name>
            <param-value>.jsp</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>waffle</servlet-name>
        <url-pattern>*.action</url-pattern>
    </servlet-mapping>
</web-app>
+-----+

* View

    We will create a very simple view to display the content of the action.  The following example uses a JSP and
    simply displays the values of the action.

** automobile.jsp

+-----+
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<html>
<form action="automobile.action">
    <table>
        <tr>
            <td>Make: </td>
            <td>
                <input type="text" value="<c:out value='${action.make}'/>" name="make"/>
            </td>
        </tr>
        <tr>
            <td>Model: </td>
            <td>
                <input type="text" value="<c:out value='${action.model}'/>" name="model"/>
            </td>
        </tr>
    </table>
    <input type="submit"/>
</form>
</html>
+-----+

* Application structure (WAR File)

    An application built with Waffle is similar to most other Java web based applications.  The following provides an
    overview of how you might layout the code for this tutorial:

+-----+
   +--- WEB-INF/
       +--- classes/
           +--- Automobile.class
           +--- MyRegistrar.class
       +--- lib/
           +--- jstl-1.1.2.jar
           +--- standard-1.1.2.jar
           +--- ognl-2.6.7.jar
           +--- picocontainer-1.2.jar
           +--- waffle-0.6-xxx.jar
       +--- web.xml
   +--- automobile.jsp
+-----+

    [NOTE] The jars <<jstl-1.1.2.jar>> and <<standard-1.1.2.jar>> are only required because this tutorial demonstrates
    the use of JSP's.  If you plan on using {{{http://freemarker.sourceforge.net/}FreeMarker}} or
    {{{http://jakarta.apache.org/velocity/index.html}Velocity }} you'll need to include the jar files that each of
    those projects may require.

* Running the application

    Now the application can be deployed to a Servlet container (e.g., Tomcat, Jetty).  So when we run the application
    and direct the browser to <<http://localhost:8080/hello/automobile.action>> we see the following:

[images/browser-1.png]

    When Waffle's front controller, WaffleServlet, handled this request it first located the "automobile" action, which
    we registered earlier to the session.

    We can also exercise the ability to bind values from the request directly onto the action.  If we append the
    value "<<?model=ranger>>" to the original url we will now have:
    <<http://localhost:8080/hello/automobile.action?model=ranger>>. Notice that the url and the value of the Model field
    has been updated.

[images/browser-2.png]

* More to see

    This has only been an introduction to Waffle and it provides a good starting point to understanding how it works.
    Continue on to {{{tutorial-two.html}Tutorial: Part two}} to see how <<ActionMethods>> can be dynamically invoked on
    an Actions.
