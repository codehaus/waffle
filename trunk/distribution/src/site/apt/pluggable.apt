                                        ------
                                        Pluggability
                                        ------

Pluggability

    Waffle was designed to provide default functionality that should be suitable for most any application.  However in
    order to provide complete flexibility Waffle allows its foundational components to be over-written with custom
    implementations.  As an example Waffle uses Ognl for data binding properties from a users request to the actions.
    It is easy to plug-in your own <<org.codehaus.waffle.bind.DataBinder>> by adding the following to the
    applications <<web.xml>>:

+-----+
<context-param>
    <param-name>org.codehaus.waffle.bind.DataBinder</param-name>
    <param-value>com.mycompany.MyDataBinder</param-value>
</context-param>
+-----+

    The <<param-name>> defines the interface of the component to be over-written and the <<param-value>> represents the
    implementing class.  The following table lists all of the components that can currently be customized in Waffle:

*------------------------------------------------------------------+
| <<Key Interface>>                                                |
*------------------------------------------------------------------+
org.codehaus.waffle.controller.ControllerDefinitionFactory             |
*------------------------------------------------------------------+
org.codehaus.waffle.action.ActionMethodExecutor         |
*------------------------------------------------------------------+
org.codehaus.waffle.action.ActionMethodResponseHandler  |
*------------------------------------------------------------------+
org.codehaus.waffle.action.ArgumentResolver             |
*------------------------------------------------------------------+
org.codehaus.waffle.bind.BindErrorMessageResolver              |
*------------------------------------------------------------------+
org.codehaus.waffle.bind.DataBinder                            |
*------------------------------------------------------------------+
org.codehaus.waffle.context.ContextContainerFactory            |
*------------------------------------------------------------------+
org.codehaus.waffle.view.DispatchHelper                        |
*------------------------------------------------------------------+
org.codehaus.waffle.i18n.MessageResources                      |
*------------------------------------------------------------------+
org.codehaus.waffle.action.MethodDefinitionFinder       |
*------------------------------------------------------------------+
org.codehaus.waffle.validation.Validator                       |
*------------------------------------------------------------------+
org.codehaus.waffle.view.ViewDispatcher                        |
*------------------------------------------------------------------+
org.codehaus.waffle.view.ViewResolver                          |
*------------------------------------------------------------------+

    Most application will never need to deal with any of these components.  But it is nice to know that you can change
    any of the default behaviour if you so desire.

Other components

    Waffle also allows you to plug-in your own custom components which don't need to extend or implement any Waffle
    components.  This is easy to do by adding <<context-param>>'s to your <<web.xml>> file.  Notice the
    <<register:>> prefix in the <param-name> node below.  When Waffle runs across such <context-param> it will register
    it for use in your application.  You can also use the prefix <<registerNonCaching:>> for those components that
    should be instantiated new each time.

+-----+
<context-param>
    <param-name>register:java.util.List</param-name>
    <param-value>java.util.ArrayList</param-value>
</context-param>
+-----+

    For a more concrete example Waffle defines the interface <org.codehaus.waffle.bind.WaffleTypeConverter>.
    Implementations of this interface allows you to write custom conversions for a specific class type.  The
    following is an example of how you can register your converters with Waffle.  Waffle's <OgnlTypeConverter>
    is dependent on all <org.codehaus.waffle.bind.WaffleTypeConverter> that are registered in the <<web.xml>>.  So
    the following example will provide 2 custom converters for use in your application.

+-----+
<context-param>
    <param-name>register:MoneyConverter</param-name>
    <param-value>com.mycompany.MoneyTypeConverter</param-value>
</context-param>

<context-param>
    <param-name>register:ColorConverter</param-name>
    <param-value>com.mycompany.ColorTypeConverter</param-value>
</context-param>
+-----+

    [Note:] Everything registered with Waffle must be registered under a unique name.  The interface name should be
    used when over-writing default or providing unique behaviour.