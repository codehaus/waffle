                                        ------
                                        Method Interceptors
                                        ------

MethodInterceptor

    A <<MethodInterceptor>> is a simple interface that allows you to intercept ActionMethods before and after they have
    been invoked.  This before and after interception provides AOP type of functionality.

    Let's look at a simple example to obtain a clear idea of how this can be leveraged.  Notice that in this example the
    <<boolean accept(Method)>> will only intercept calls to <AutomobileAction.accelerate(String)> method.  The <<intercept>>
    method below is a trivial example that ensures that the value to be invoke on the event is less than <50>, if not
    that value is replaced with the value <0>.  Finally, the call to <<chain.proceed()>> allows for propogation
    to the next MethodInterceptor, or to actually invoking the <ActionMethod>.  Of course if you did not want the
    ActionMethod to be invoke you would NOT call the <proceed> method (you could return different value or throw an
    Exception).
    
+-----+
public class MyMethodInterceptor implements MethodInterceptor {
    private final Method accelerateMethod;

    public MyMethodInterceptor() {
        try {
            accelerateMethod = AutomobileAction.class.getMethod("accelerate", Integer.class);
        } catch(Exception e) {
            throw new RuntimeException(e);
        }
    }

    public boolean accept(Method eventMethod) {
        return accelerateMethod.equals(eventMethod);
    }

    public Object intercept(ActionDefinition actionDefinition,
                           Method method,
                           InterceptorChain chain,
                           Object ... arguments)
                           throws IllegalAccessException, InvocationTargetException {

        Integer value = (Integer)arguments[0];

        if(value > 50) {
            arguments[0] == "0"; // change input to '0'
        }

        return chain.proceed(actionDefinition, method, arguments);
    }
}
+-----+

    <MethodInterceptor> are registered with Waffle through the Registrar.  So like other components in Waffle
    MethodInterceptors can take advantage of Dependency Injection.

* Sortable

    You can ensure that your MethodInterceptors are called in a particular order by having them implement the
    <org.codehaus.waffle.action.intercept.Sortable> interface.  Non-Sortable MethodInterceptors will be placed
    at the end of the InterceptorChain.