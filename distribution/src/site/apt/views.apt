                                        ------
                                        Views
                                        ------

Views

    With Waffle you can write views with either Java Server Pages, FreeMarker or Velocity.  Other view technologies,
    like Tiles will also work.  Decoration technologies like Sitemesh are quite compatible with Waffle (see our
    Freemarker example).

* Java Server Pages

    Using Java Server Pages in Waffle is as easy as it is with other frameworks.  You'll be able to reference the Action
    that is asscoaiated with the view by the <<action>> keyword.  In the jspx example below the <<getName()>> method will
    be invoked from the Action:

+-----+
<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:jsp="http://java.sun.com/JSP/Page">
<jsp:output doctype-root-element="html"
            doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
            doctype-system="http://www.w3c.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"/>
<jsp:directive.page contentType="text/html;charset=UTF-8"/>

<head>
    <title>Waffle</title>
</head>

<body>
    Waffle says: ${action.greeting}
</body>

</html>
+-----+

    You will also need to set the default view suffix parameter on the WaffleServlet so that actions can be routed to
    the correct view.  The following is an exerpt from the <web.xml> file:

+-----+
<servlet>
    <servlet-name>waffle</servlet-name>
    <servlet-class>org.codehaus.waffle.servlet.WaffleServlet</servlet-class>
    <init-param>
        <description>Optional, by deafult '/' (root) is used.</description>
        <param-name>view.prefix</param-name>
        <param-value>/WEB-INF/jsp</param-value>
    </init-param>
    <init-param>
        <param-name>view.suffix</param-name>
        <param-value>.jspx</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
</servlet>
+-----+

    Note that .jspx being the default view suffix for Waffle, the 'init-param' for it could be left out entirely (and
    is in some our examples).

* FreeMarker

    FreeMarker views can be written like any FreeMarker pages for other web frameworks.  For the most part it is best
    to follow the documentation FreeMarker provides.  Similarly to the JavaServer Pages definition above you will need to
    register the default view suffix accordingly for FreeMarker (typically <<.ftl>>).

    You will need to register the <freemarker.ext.servlet.FreemarkerServlet> in the <web.xml>:

+-----+
<servlet>
    <servlet-name>freemarker</servlet-name>
    <servlet-class>freemarker.ext.servlet.FreemarkerServlet</servlet-class>
    <!-- FreemarkerServlet settings: -->
    <init-param>
        <param-name>TemplatePath</param-name>
        <param-value>/</param-value>
    </init-param>
    <init-param>
        <param-name>NoCache</param-name>
        <param-value>true</param-value>
    </init-param>
    <init-param>
        <param-name>ContentType</param-name>
        <param-value>text/html</param-value>
    </init-param>
    <!-- FreeMarker settings: -->
    <init-param>
        <param-name>template_update_delay</param-name>
        <param-value>0</param-value> <!-- 0 is for development only! Use higher value otherwise. -->
    </init-param>
    <init-param>
        <param-name>default_encoding</param-name>
        <param-value>ISO-8859-1</param-value>
    </init-param>
    <init-param>
        <param-name>number_format</param-name>
        <param-value>0.##########</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
</servlet>
+-----+

    Again, see our working Freemarker example.

* Velocity

    As with the JavaServer Pages and FreeMarker descriptions above you can access the actions from your Velocity script
    via the <<action>> keyword.  The example below shows how you should register the Servlet to handle Velocity based
    pages:

+-----+
<servlet>
    <servlet-name>velocity</servlet-name>
    <servlet-class>org.codehaus.waffle.WaffleVelocityServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
</servlet>
+-----+



